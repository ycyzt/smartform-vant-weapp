{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SmoothSignature = function SmoothSignature(_ctx, _options) {\n  var _this = this;\n\n  _classCallCheck(this, SmoothSignature);\n\n  this.ctx = void 0;\n  this.canvas = void 0;\n  this.width = 300;\n  this.height = 150;\n  this.scale = 1;\n  this.color = 'black';\n  this.bgColor = '';\n  this.openSmooth = true;\n  this.minWidth = 2;\n  this.maxWidth = 6;\n  this.minSpeed = 1.5;\n  this.maxWidthDiffRate = 20;\n  this.maxHistoryLength = 20;\n  this.points = [];\n  this.canAddHistory = true;\n  this.historyList = [];\n  this.getImagePath = void 0;\n  this.toDataURL = void 0;\n  this.requestAnimationFrame = void 0;\n\n  this.init = function (ctx, options) {\n    if (!ctx) return;\n    _this.ctx = ctx;\n    _this.getImagePath = options.getImagePath;\n    _this.toDataURL = options.toDataURL;\n    _this.requestAnimationFrame = options.requestAnimationFrame;\n    _this.width = options.width || _this.width;\n    _this.height = options.height || _this.height;\n    _this.color = options.color || _this.color;\n    _this.bgColor = options.bgColor || _this.bgColor;\n    _this.openSmooth = options.openSmooth === undefined ? _this.openSmooth : !!options.openSmooth;\n    _this.minWidth = options.minWidth || _this.minWidth;\n    _this.maxWidth = options.maxWidth || _this.maxWidth;\n    _this.minSpeed = options.minSpeed || _this.minSpeed;\n    _this.maxWidthDiffRate = options.maxWidthDiffRate || _this.maxWidthDiffRate;\n    _this.maxHistoryLength = options.maxHistoryLength || _this.maxHistoryLength;\n\n    if (typeof options.scale === 'number') {\n      _this.scale = options.scale;\n\n      _this.ctx.scale(_this.scale, _this.scale);\n\n      _this.ctx.draw && _this.ctx.draw();\n    }\n\n    _this.ctx.lineCap = 'round';\n    _this.ctx.setLineCap && _this.ctx.setLineCap('round');\n\n    _this.drawBgColor();\n  };\n\n  this.onDrawStart = function (x, y) {\n    _this.canAddHistory = true;\n    _this.ctx.strokeStyle = _this.color;\n    _this.ctx.setStrokeStyle && _this.ctx.setStrokeStyle(_this.color);\n\n    _this.initPoint(x, y);\n  };\n\n  this.onDrawMove = function (x, y) {\n    _this.initPoint(x, y);\n\n    _this.onDraw();\n  };\n\n  this.onDraw = function () {\n    if (_this.points.length < 2) return;\n\n    _this.addHistory();\n\n    var point = _this.points.slice(-1)[0];\n\n    var prePoint = _this.points.slice(-2, -1)[0];\n\n    var onDraw = function onDraw() {\n      if (_this.openSmooth) {\n        _this.drawSmoothLine(prePoint, point);\n      } else {\n        _this.drawNoSmoothLine(prePoint, point);\n      }\n    };\n\n    if (typeof _this.requestAnimationFrame === 'function') {\n      _this.requestAnimationFrame(function () {\n        return onDraw();\n      });\n    } else {\n      onDraw();\n    }\n  };\n\n  this.onDrawEnd = function () {\n    _this.canAddHistory = true;\n    _this.points = [];\n  };\n\n  this.getLineWidth = function (speed) {\n    var minSpeed = _this.minSpeed > 10 ? 10 : _this.minSpeed < 1 ? 1 : _this.minSpeed;\n    var addWidth = (_this.maxWidth - _this.minWidth) * speed / minSpeed;\n    var lineWidth = Math.max(_this.maxWidth - addWidth, _this.minWidth);\n    return Math.min(lineWidth, _this.maxWidth);\n  };\n\n  this.getRadianData = function (x1, y1, x2, y2) {\n    var dis_x = x2 - x1;\n    var dis_y = y2 - y1;\n\n    if (dis_x === 0) {\n      return {\n        val: 0,\n        pos: -1\n      };\n    }\n\n    if (dis_y === 0) {\n      return {\n        val: 0,\n        pos: 1\n      };\n    }\n\n    var val = Math.abs(Math.atan(dis_y / dis_x));\n\n    if (x2 > x1 && y2 < y1 || x2 < x1 && y2 > y1) {\n      return {\n        val: val,\n        pos: 1\n      };\n    }\n\n    return {\n      val: val,\n      pos: -1\n    };\n  };\n\n  this.getRadianPoints = function (radianData, x, y, halfLineWidth) {\n    if (radianData.val === 0) {\n      if (radianData.pos === 1) {\n        return [{\n          x: x,\n          y: y + halfLineWidth\n        }, {\n          x: x,\n          y: y - halfLineWidth\n        }];\n      }\n\n      return [{\n        y: y,\n        x: x + halfLineWidth\n      }, {\n        y: y,\n        x: x - halfLineWidth\n      }];\n    }\n\n    var dis_x = Math.sin(radianData.val) * halfLineWidth;\n    var dis_y = Math.cos(radianData.val) * halfLineWidth;\n\n    if (radianData.pos === 1) {\n      return [{\n        x: x + dis_x,\n        y: y + dis_y\n      }, {\n        x: x - dis_x,\n        y: y - dis_y\n      }];\n    }\n\n    return [{\n      x: x + dis_x,\n      y: y - dis_y\n    }, {\n      x: x - dis_x,\n      y: y + dis_y\n    }];\n  };\n\n  this.initPoint = function (x, y) {\n    var point = {\n      x: x,\n      y: y,\n      t: Date.now()\n    };\n\n    var prePoint = _this.points.slice(-1)[0];\n\n    if (prePoint && (prePoint.t === point.t || prePoint.x === x && prePoint.y === y)) {\n      return;\n    }\n\n    if (_this.openSmooth && prePoint) {\n      var prePoint2 = _this.points.slice(-2, -1)[0];\n\n      point.distance = Math.sqrt(Math.pow(point.x - prePoint.x, 2) + Math.pow(point.y - prePoint.y, 2));\n      point.speed = point.distance / (point.t - prePoint.t || 0.1);\n      point.lineWidth = _this.getLineWidth(point.speed);\n\n      if (prePoint2 && prePoint2.lineWidth && prePoint.lineWidth) {\n        var rate = (point.lineWidth - prePoint.lineWidth) / prePoint.lineWidth;\n        var maxRate = _this.maxWidthDiffRate / 100;\n        maxRate = maxRate > 1 ? 1 : maxRate < 0.01 ? 0.01 : maxRate;\n\n        if (Math.abs(rate) > maxRate) {\n          var per = rate > 0 ? maxRate : -maxRate;\n          point.lineWidth = prePoint.lineWidth * (1 + per);\n        }\n      }\n    }\n\n    _this.points.push(point);\n\n    _this.points = _this.points.slice(-3);\n  };\n\n  this.drawSmoothLine = function (prePoint, point) {\n    var dis_x = point.x - prePoint.x;\n    var dis_y = point.y - prePoint.y;\n\n    if (Math.abs(dis_x) + Math.abs(dis_y) <= 2) {\n      point.lastX1 = point.lastX2 = prePoint.x + dis_x * 0.5;\n      point.lastY1 = point.lastY2 = prePoint.y + dis_y * 0.5;\n    } else {\n      point.lastX1 = prePoint.x + dis_x * 0.3;\n      point.lastY1 = prePoint.y + dis_y * 0.3;\n      point.lastX2 = prePoint.x + dis_x * 0.7;\n      point.lastY2 = prePoint.y + dis_y * 0.7;\n    }\n\n    point.perLineWidth = (prePoint.lineWidth + point.lineWidth) / 2;\n\n    if (typeof prePoint.lastX1 === 'number') {\n      _this.drawCurveLine(prePoint.lastX2, prePoint.lastY2, prePoint.x, prePoint.y, point.lastX1, point.lastY1, point.perLineWidth);\n\n      if (prePoint.isFirstPoint) return;\n      if (prePoint.lastX1 === prePoint.lastX2 && prePoint.lastY1 === prePoint.lastY2) return;\n\n      var data = _this.getRadianData(prePoint.lastX1, prePoint.lastY1, prePoint.lastX2, prePoint.lastY2);\n\n      var points1 = _this.getRadianPoints(data, prePoint.lastX1, prePoint.lastY1, prePoint.perLineWidth / 2);\n\n      var points2 = _this.getRadianPoints(data, prePoint.lastX2, prePoint.lastY2, point.perLineWidth / 2);\n\n      _this.drawTrapezoid(points1[0], points2[0], points2[1], points1[1]);\n    } else {\n      point.isFirstPoint = true;\n    }\n  };\n\n  this.drawNoSmoothLine = function (prePoint, point) {\n    point.lastX = prePoint.x + (point.x - prePoint.x) * 0.5;\n    point.lastY = prePoint.y + (point.y - prePoint.y) * 0.5;\n\n    if (typeof prePoint.lastX === 'number') {\n      _this.drawCurveLine(prePoint.lastX, prePoint.lastY, prePoint.x, prePoint.y, point.lastX, point.lastY, _this.maxWidth);\n    }\n  };\n\n  this.drawCurveLine = function (x1, y1, x2, y2, x3, y3, lineWidth) {\n    lineWidth = Number(lineWidth.toFixed(1));\n    _this.ctx.setLineWidth && _this.ctx.setLineWidth(lineWidth);\n    _this.ctx.lineWidth = lineWidth;\n\n    _this.ctx.beginPath();\n\n    _this.ctx.moveTo(Number(x1.toFixed(1)), Number(y1.toFixed(1)));\n\n    _this.ctx.quadraticCurveTo(Number(x2.toFixed(1)), Number(y2.toFixed(1)), Number(x3.toFixed(1)), Number(y3.toFixed(1)));\n\n    _this.ctx.stroke();\n\n    _this.ctx.draw && _this.ctx.draw(true);\n  };\n\n  this.drawTrapezoid = function (point1, point2, point3, point4) {\n    _this.ctx.beginPath();\n\n    _this.ctx.moveTo(Number(point1.x.toFixed(1)), Number(point1.y.toFixed(1)));\n\n    _this.ctx.lineTo(Number(point2.x.toFixed(1)), Number(point2.y.toFixed(1)));\n\n    _this.ctx.lineTo(Number(point3.x.toFixed(1)), Number(point3.y.toFixed(1)));\n\n    _this.ctx.lineTo(Number(point4.x.toFixed(1)), Number(point4.y.toFixed(1)));\n\n    _this.ctx.setFillStyle && _this.ctx.setFillStyle(_this.color);\n    _this.ctx.fillStyle = _this.color;\n\n    _this.ctx.fill();\n\n    _this.ctx.draw && _this.ctx.draw(true);\n  };\n\n  this.drawBgColor = function () {\n    if (!_this.bgColor) return;\n    _this.ctx.setFillStyle && _this.ctx.setFillStyle(_this.bgColor);\n    _this.ctx.fillStyle = _this.bgColor;\n\n    _this.ctx.fillRect(0, 0, _this.width, _this.height);\n\n    _this.ctx.draw && _this.ctx.draw(true);\n  };\n\n  this.drawByImage = function (url) {\n    _this.ctx.clearRect(0, 0, _this.width, _this.height);\n\n    try {\n      _this.ctx.drawImage(url, 0, 0, _this.width, _this.height);\n\n      _this.ctx.draw && _this.ctx.draw(true);\n    } catch (e) {\n      _this.historyList.length = 0;\n    }\n  };\n\n  this.addHistory = function () {\n    if (!_this.maxHistoryLength || !_this.canAddHistory) return;\n    _this.canAddHistory = false;\n\n    if (!_this.getImagePath) {\n      _this.historyList.length++;\n      return;\n    }\n\n    _this.getImagePath().then(function (url) {\n      if (url) {\n        _this.historyList.push(url);\n\n        _this.historyList = _this.historyList.slice(-_this.maxHistoryLength);\n      }\n\n      ;\n    });\n  };\n\n  this.clear = function () {\n    _this.ctx.clearRect(0, 0, _this.width, _this.height);\n\n    _this.ctx.draw && _this.ctx.draw();\n\n    _this.drawBgColor();\n\n    _this.historyList.length = 0;\n  };\n\n  this.undo = function () {\n    if (!_this.getImagePath || !_this.historyList.length) return;\n\n    var pngURL = _this.historyList.splice(-1)[0];\n\n    _this.drawByImage(pngURL);\n\n    if (_this.historyList.length === 0) {\n      _this.clear();\n    }\n  };\n\n  this.isEmpty = function () {\n    return _this.historyList.length === 0;\n  };\n\n  this.init(_ctx, _options);\n};\n\nmodule.exports = SmoothSignature;\nvar _default = SmoothSignature;\nexports.default = _default;"]}